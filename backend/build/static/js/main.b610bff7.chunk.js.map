{"version":3,"sources":["stores/UserStore.js","LoginForm.js","SubmitButton.js","InputField.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","LoginForm","className","React","Component","SubmitButton","disabled","props","onClick","text","App","fetch","method","headers","res","json","result","success","UserStore","console","log","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSAce,MAXX,aAAc,oBACVA,YAAiBC,KAAM,CAEnBC,SAAS,EACTC,YAAY,EACZC,SAAU,MCOPC,E,uKARX,OACE,yBAAKC,UAAU,aAAf,c,GALkBC,IAAMC,WCoBfC,GCpBUF,IAAMC,U,uKDEpB,IAAD,OAEN,OACE,yBAAKF,UAAU,gBAEb,4BACEA,UAAU,MACVI,SAAUT,KAAKU,MAAMD,SACrBE,QAAU,kBAAM,EAAKD,MAAMC,YAE1BX,KAAKU,MAAME,W,GAZKN,IAAMC,YEK3BM,G,mUAMiBC,MAAM,cAAe,CACpCC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,qB,cAJhBC,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,SACnBC,EAAUpB,SAAU,EACpBoB,EAAUnB,YAAa,EACvBmB,EAAUlB,SAAWgB,EAAOhB,WAI5BkB,EAAUpB,SAAU,EACpBoB,EAAUnB,YAAa,G,kDAKzBmB,EAAUpB,SAAU,EACpBoB,EAAUnB,YAAa,E,4RAQNY,MAAM,UAAW,CAChCC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,qB,cAJhBC,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,UACnBC,EAAUnB,YAAa,EACvBmB,EAAUlB,SAAW,I,kDAOvBmB,QAAQC,IAAR,M,+IAMK,IAAD,OAEN,OAAIF,EAAUpB,QAEV,yBAAKI,UAAU,OACb,yBAAKA,UAAU,aAAf,4BAQAgB,EAAUnB,WAEV,yBAAKG,UAAU,OACb,yBAAKA,UAAU,aAAf,WACWgB,EAAUlB,SAEnB,kBAAC,EAAD,CACES,KAAM,UACNH,UAAU,EACVE,QAAU,kBAAM,EAAKa,gBAU/B,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,aACX,kBAAC,EAAD,CACQO,KAAM,UACNH,UAAU,EACVE,QAAU,kBAAM,EAAKa,cAE/B,kBAAC,EAAD,Y,GAtGQlB,IAAMC,YA8GTkB,cAASZ,GC1GJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.b610bff7.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\nclass UserStore{\r\n    constructor(){\r\n        extendObservable(this, {\r\n            \r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: ''\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React from 'react';\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div className=\"loginForm\">\r\n        assdds\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\n\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div className=\"submitButton\">\r\n\r\n        <button   \r\n          className='btn'\r\n          disabled={this.props.disabled}\r\n          onClick={ () => this.props.onClick() }\r\n        >\r\n          {this.props.text}\r\n        </button>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React from 'react';\r\n\r\n\r\nclass InputField extends React.Component {\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div className=\"inputField\">\r\n        \r\n        <input\r\n          className='input'\r\n          type={this.props.type}\r\n          placeholder={this.props.placeholder}\r\n          value={this.props.value}\r\n          onChange={ (e) => this.props.onChange(e.target.value) }\r\n        />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","import React        from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport UserStore    from './stores/UserStore';\r\nimport LoginForm    from './LoginForm';\r\nimport InputField   from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  async componentDidMount() {\r\n\r\n    try {\r\n\r\n      let res = await  fetch('/isLoggedIn', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-type': 'applicaion/json'\r\n        }\r\n      });\r\n\r\n      let result = await res.json();\r\n\r\n      if (result && result.success){\r\n        UserStore.loading = false;\r\n        UserStore.isLoggedIn = true;\r\n        UserStore.username = result.username;\r\n      }\r\n\r\n      else{\r\n        UserStore.loading = false;\r\n        UserStore.isLoggedIn = false;\r\n      }\r\n    }\r\n    \r\n    catch(e){\r\n      UserStore.loading = false;\r\n      UserStore.isLoggedIn = false;\r\n    }\r\n  }\r\n\r\n  async doLogout() {\r\n\r\n    try {\r\n\r\n      let res = await  fetch('/logout', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-type': 'applicaion/json'\r\n        }\r\n      });\r\n\r\n      let result = await res.json();\r\n\r\n      if (result && result.success){\r\n        UserStore.isLoggedIn = false;\r\n        UserStore.username = '';\r\n      }\r\n\r\n      \r\n    }\r\n    \r\n    catch(e){\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n\r\n    if (UserStore.loading) {\r\n      return(\r\n        <div className=\"app\">\r\n          <div className='container'>\r\n            Loading, please wait...\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else {\r\n      if (UserStore.isLoggedIn) {\r\n        return(\r\n          <div className=\"app\">\r\n            <div className='container'>\r\n              Welcome {UserStore.username}\r\n\r\n              <SubmitButton\r\n                text={'Log out'}\r\n                disabled={false}\r\n                onClick={ () => this.doLogout() }\r\n                />\r\n\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    \r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <div className='container'>\r\n            <SubmitButton\r\n                    text={'Log out'}\r\n                    disabled={false}\r\n                    onClick={ () => this.doLogout() }\r\n                    />\r\n          <LoginForm />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n}\r\n\r\nexport default observer(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}