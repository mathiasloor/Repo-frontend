{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","lenght","setState","fetch","method","headers","body","JSON","stringify","res","json","result","document","write","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.675285f6.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\n\nclass UserStore{\n    constructor(){\n        extendObservable(this, {\n            \n            loading: true,\n            isLoggedIn: false,\n            username: ''\n\n        })\n    }\n}\n\nexport default new UserStore();","import React from 'react';\n\n\nclass InputField extends React.Component {\n\n  render(){\n\n    return (\n      <div className=\"inputField\">\n        \n        <input\n          className='input'\n          type={this.props.type}\n          placeholder={this.props.placeholder}\n          value={this.props.value}\n          onChange={ (e) => this.props.onChange(e.target.value) }\n        />\n        \n      </div>\n    );\n  }\n}\n\nexport default InputField;\n","import React from 'react';\n\n\nclass SubmitButton extends React.Component {\n\n  render(){\n\n    return (\n      <div className=\"submitButton\">\n\n        <button   \n          className='btn'\n          disabled={this.props.disabled}\n          onClick={ () => this.props.onClick() }\n        >\n          {this.props.text}\n        </button>\n        \n      </div>\n    );\n  }\n}\n\nexport default SubmitButton;\n","import React from 'react';\nimport InputField from './InputField';\nimport SubmitButton from './SubmitButton';\nimport UserStore from './stores/UserStore';\n\nclass LoginForm extends React.Component {\n\nconstructor(props)\n{   super(props);\n    this.state = \n    {\n      username: '',\n      password: '',\n      buttonDisabled: false \n    }\n}\n\nsetInputValue(property, val) \n{   val = val.trim();\n    if (val.lenght > 12)\n    {   \n        return;\n    }\n    /*console.log(val);*/\n    this.setState(\n    {   \n        [property]: val\n    })\n}\n\nresetForm() \n{   this.setState(\n    {\n      username: '',\n      password: '',\n      buttonDisabled: false\n    })\n}\n\nasync doLogin() \n{\n\n      /*document.write('login ',\"<br>\");*/\n    if (!this.state.username)\n    {\n      return;\n    }\n    if (!this.state.password)\n    {\n      return;\n    }\n\n    this.setState(\n    {\n        buttonDisabled: true\n    })\n\n    try \n    {\n        let res = await fetch('/login', \n        {\n            method: 'post',\n            headers: \n            {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(\n            {\n              username: this.state.username,\n              password: this.state.password\n            })\n            \n        });\n        \n        /*document.write('login let res ',res,\"<br>\");*/\n\n        let result = await res.json();\n        \n        document.write('resultado: ',result,\"<br>\");\n        \n        if (result && result.success) \n        {\n            UserStore.isLoggedIn = true;\n            UserStore.username = result.username;\n        }\n\n        else if (result && result.success === false)\n        {\n            this.resetForm();\n            alert(result.msg);\n        }\n    }\n\n    catch(e) \n    {\n        /*document.write('e: ',e,\"<br>\");*/\n        console.log(e);\n        this.resetForm();\n    }\n\n}\n\nrender()\n{\n\n    return (\n        <div className=\"loginForm\">\n\n        Log in\n        <InputField\n          type= 'text'\n          placeholder='Username'\n          value={this.state.username ? this.state.username : ''}        \n          onChange={ (val) => this.setInputValue('username', val) }\n        />\n\n        <InputField\n          type= 'password'\n          placeholder='Password'\n          value={this.state.password ? this.state.password : ''}        \n          onChange={ (val) => this.setInputValue('password', val) }\n        />\n\n        <SubmitButton\n          text='Login'\n          disabled={this.state.buttonDisabled}\n          onClick={ () => this.doLogin() }\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n","/* Importar Componentes de React */\nimport React        from 'react';\nimport { observer } from 'mobx-react';\n/* Importar Componentes Creados por el Desarrollador */\nimport UserStore    from './stores/UserStore';\nimport LoginForm    from './LoginForm';\nimport SubmitButton from './SubmitButton';\nimport './App.css';\n\n/* Creaar Clase App */\nclass App extends React.Component {\n\n  /* Recuperación de Datos Cuando se Monta un Componente */\n  async componentDidMount() {\n\n    try {\n\n      let res = await  fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'applicaion/json'\n        }\n      });\n\n      let result = await res.json();\n\n      document.write('resultado: ', result,' exito: ',result.success, \"<br>\");\n\n      if (result && result.success){\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      }\n\n      else{\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n    }\n    \n    catch(e){\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n  }\n\n  /* Método que se Llamará Cuando el Usuario Haga Clic en el Botón de Cierre de Sesión */\n  async doLogout() {\n\n    try {\n\n      let res = await  fetch('/logout', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'applicaion/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if (result && result.success){\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n\n      \n    }\n    \n    catch(e){\n      console.log(e)\n    }\n  }\n\n  /* Renderiza un elemento React al DOM en el contenedor suministrado y retorna \n    una referencia al componente (o devuelve null para componentes sin estado). */\n    render(){\n\n      if (UserStore.loading) {\n        document.write('usuario : ', UserStore,\"<br>\");\n      return(\n        <div className=\"app\">\n          <div className='container'>\n            Loading, please wait...\n          </div>\n        </div>\n      );\n    }\n\n    else {\n      if (UserStore.isLoggedIn) {\n        return(\n          <div className=\"app\">\n            <div className='container'>\n              Welcome {UserStore.username}\n\n              <SubmitButton\n                text={'Log out'}\n                disabled={false}\n                onClick={ () => this.doLogout() }\n                />\n\n            </div>\n          </div>\n        );\n      }\n    \n\n    return (\n      <div className=\"app\">\n        <div className='container'>\n          <LoginForm />\n        </div>\n      </div>\n    );\n  }\n}\n}\n\n/*  Exportar una sola clase, función o primitiva desde un archivo de script. */\nexport default observer(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}